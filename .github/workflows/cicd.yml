name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # ----------------
  # CI JOB - Run tests
  # ----------------
  ci:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    env:
      DJANGO_SETTINGS_MODULE: config.settings
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONDONTWRITEBYTECODE: "1"

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Prepare database (create secret-based role & DB)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          until PGPASSWORD=postgres psql -h localhost -U postgres -c "SELECT 1" >/dev/null 2>&1; do
            echo "Waiting for Postgres…"; sleep 1
          done

          PGPASSWORD=postgres psql -h localhost -U postgres -v ON_ERROR_STOP=1 -c "DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '${DB_USER}') THEN
              CREATE ROLE ${DB_USER} LOGIN PASSWORD '${DB_PASSWORD}' CREATEDB;
            ELSE
              ALTER ROLE ${DB_USER} WITH LOGIN PASSWORD '${DB_PASSWORD}' CREATEDB;
            END IF;
          END
          \$\$;"

          PGPASSWORD=postgres psql -h localhost -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1 \
            || PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE ${DB_NAME} OWNER ${DB_USER};"

      - name: Django check & migrate (sanity against the dev DB)
        run: |
          python manage.py check
          python manage.py migrate --noinput

      - name: Run tests
        run: pytest -vv -ra

  # ----------------
  # CD JOB - Deploy to EC2
  # ----------------
  cd:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: ci   # ✅ Will only run if CI passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t raincast:latest .

      - name: Tag Docker images
        run: |
          docker tag raincast:latest ${{ secrets.ECR_REGISTRY }}:latest
          docker tag raincast:latest ${{ secrets.DOCKERHUB_USERNAME }}/raincast:latest

      - name: Push Docker images
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/raincast:latest

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/Raincast
            aws ecr get-login-password --region us-east-1 | \
              docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f
